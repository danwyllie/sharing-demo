version: 2.1
jobs:
  save_hello_world_output:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Save hello"
#          command: echo "Hello dan!" > output.txt
          command: |
            mkdir backend
            cd backend
            pwd
            echo "The migration has been executed successfully. End of file." > migrationresults.txt
            ls
            echo "== cat of file to console =="
            cat migrationresults.txt
            ls -d $(pwd -P)/migrationresults.txt
      - run:
          name: "Save workflowid"
          command: |  
            echo "== Testing lastworkflowid =="
            echo "workflow1234" > LastworkflowID.txt
            echo "== Contents of file =="
            cat LastworkflowID.txt
#      - persist_to_workspace:
#          root: .
#          paths:
#            - output.txt
      - persist_to_workspace:
          root: .
          paths:
            - LastworkflowID.txt
#  print_output_file:
#    docker:
#      - image: cimg/base:stable
#    steps:
#      - checkout
#      - attach_workspace:
#          at: ./
#      - run:
#          name: "Cat hello"
#          command: cat output.txt
  
#  dan-testing:
#    docker:
#      - image: circleci/node:13.8.0
#    steps:
#      - checkout
#      - attach_workspace:
#          at: ~/
#      - run:
#          name: "Testing installs"
#          command: |
#            echo "== cat the file =="
#            cat ~/project/backend/migrationresults.txt
#            echo "== check file contents =="
#            if grep -q "successfully" ~/project/backend/migrationresults.txt
#            then
#              curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/migrationCODETEST_${CIRCLE_WORKFLOW_ID:0:7}  -d 'Hello found'
#              echo "Curl command run(?)"
#            fi

  run-migrations-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: "Install dependencies - AWS CLI" 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Perform testing"  
          command: |
            echo "== Check AWS version =="
            aws --version
            echo "== Curl test =="
            curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/migrationCODETEST_${CIRCLE_WORKFLOW_ID:0:7}  -d 'Testing!'
            export LASTWORKFLOWURL=$("https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/lastworkflow_${CIRCLE_WORKFLOW_ID:0:7}")
            echo "== URL test =="
            echo "$LASTWORKFLOWURL"

  Testing:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
#      - run:
#          name: "Install dependencies - tar"
#          command: |
#            yum install -y tar gzip
      - run:
          name: "Create .env file"
          command: |
            echo "== Confirm variables being used =="
            echo TYPEORM_CONNECTION
            echo TYPEORM_MIGRATIONS_DIR
            echo TYPEORM_ENTITIES
            echo TYPEORM_MIGRATIONS
            echo TYPEORM_HOST
            echo TYPEORM_PORT
            echo TYPEORM_USERNAME
            echo TYPEORM_PASSWORD
            echo TYPEORM_DATABASE

#      - run:
#          name: "Verify stacks and cleanup if required"
#          command: |
#            echo "== Grabbing AWS Stacks =="
#            export STACKS=($(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[*].StackName" --no-paginate --output text))
#            echo "== Grabbing lastworkflow id =="
#            export LastworkflowID=$(curl -k https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/lastworkflow_837aeec)
#            echo "Lastworkflow =" "$LastworkflowID"
#            export LastID="${LastworkflowID: -7}"
#            echo "LastID =" "$LastID"
#            echo "== Show current cloudformation stacks =="
#            printf '%s\n' "${STACKS[@]}"
#            if [[ "${STACKS[@]}" =~ "${LastID}"  ]]
#            then
#              echo "== Cleanup required: Deleting AWS Cloudformation Stacks =="
#              echo "Lastworkflow =" "$LastworkflowID"
#              echo "LastID =" "$LastID"
#              echo aws s3 rm "s3://udapeople-${LastworkflowID}" --recursive
#              echo aws cloudformation delete-stack --stack-name "udapeople-backend-${LastworkflowID}"
#              echo aws cloudformation delete-stack --stack-name "udapeople-frontend-${LastworkflowID}"
#            else
#              echo "No cleanup performed: AWS Cloudformation Stacks are still current"
#            fi
##      - run:
#          name: "Grab and export last workflow id"
#          command: |
#            export LASTWORKFLOWURL=($("https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/lastworkflow_${CIRCLE_WORKFLOW_ID:0:7}"))
#            echo "== URL test =="
#            echo "$LASTWORKFLOWURL"
#            echo "https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/lastworkflow_${CIRCLE_WORKFLOW_ID:0:7}"
#      - run:
#          name: "Grab last workflowid"
#          command: |
#            echo "== cat workflowidtxt =="
#            cat LastworkflowID.txt
#            export LastworkflowID=$(aws cloudformation list-exports --region ${AWS_DEFAULT_REGION} --query "Exports[?Name==\`WorkflowID\`].Value" --output text --no-paginate)
#            echo $LastworkflowID > LastworkflowID.txt
#      - run:
#          name: "Temp test code to grab last workflowid from cloudformation names"
#          command: |
#            export LastworkflowID=$(aws cloudformation list-exports --region ${AWS_DEFAULT_REGION} --query "Exports[?Name==\`WorkflowID\`].Value" --output text --no-paginate)
#            echo "== Show lastworkflow id to console =="
#            echo $LastworkflowID
#            export LastID="${LastworkflowID: -7}"
#            echo $LastID
#      - run:
#          name: "Grab current cloudformation stacks"
#          command: |
#            export STACKS=($(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[*].StackName" --no-paginate --output text))
#            echo "== Show current cloudformation stacks =="
#            printf '%s\n' "${STACKS[@]}"
#      - run:
#          name: "Testing grabbing old workflow"
#          command: |
#            export LastworkflowID=($(aws cloudformation list-exports --region ${AWS_DEFAULT_REGION} --query "Exports[?Name==\`WorkflowID\`].Value" --output text --no-paginate))
#            echo "== Showing workflowid to console =="
#            echo "$LastworkflowID"
#            LASTWORKFLOWURL="https://kvdb.io/92NGEye9MJm1giTJk2FtfJ/${CIRCLE_WORKFLOW_ID:0:7}"
#            echo "$LASTWORKFLOWURL"
#      - run:
#          name: "Grab last workflowid"
#          command: |
#            export LastworkflowID=($(aws cloudformation list-exports --region ${AWS_DEFAULT_REGION} --query "Exports[?Name==\`WorkflowID\`].Value" --output text --no-paginate))
#            echo "== Showing workflowid to console =="
#            echo "$LastworkflowID"
#            export LastID="${LastworkflowID: -7}"
#            echo "$LastID"
#            echo "$LastID" > LastworkflowID.txt            
#      - run:
#          name: "Grab current cloudformation stacks"
#          command: |
#            export STACKS=($(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query "StackSummaries[*].StackName" --no-paginate --output text))
#            echo "== Show current cloudformation stacks =="
#            printf '%s\n' "${STACKS[@]}"

workflows:
  say-hello-workflow:
    jobs:
#      - save_hello_world_output
      - Testing
#          requires:
#            - save_hello_world_output
#      - print_output_file:
#          requires:
#            - save_hello_world_output
#      - dan-testing:
#          requires:
#            - save_hello_world_output
#      - run-migrations-test:
#          requires:
#            - dan-testing
